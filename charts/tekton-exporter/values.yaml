nameOverride: ""
fullnameOverride: ""

# Following custom ClusterRole is a place where to add extra types of resources
# allowed to be watched by Tekton Exporter. By default, only PipelineRun and TaskRun are allowed,
# but it's possible to add extra resources or even get rid of some of them for improved security
customClusterRole:
  # Specifies whether a custom clusterRole should be created
  create: false

  # Annotations to add to the clusterRole
  annotations: {}

  # A set of rules as documented here: https://kubernetes.io/docs/reference/access-authn-authz/rbac/
  rules:
  - apiGroups: ['']
    resources:
      - pipeline
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch

  clusterRoleBinding:
    # Annotations to add to the clusterRoleBinding
    annotations: {}

# TODO
controller:

  replicaCount: 1

  image:
    repository: prosimcorp/reforma
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  imagePullSecrets: []

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "tekton-exporter"

  podAnnotations: {}

  podSecurityContext: {}

  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  extraArgs:
    #- --log-level=debug
    #- --disable-trace=false

service:
  # Specify whether a service resource should be created or not
  enabled: false

  type: ClusterIP
  port: 9090

serviceMonitor:
  # Enables ServiceMonitor creation
  enabled: false

  # JobLabel selects the label from the associated Kubernetes service which will be used as the job label for all metrics.
  jobLabel: ""
  # TargetLabels transfers labels from the Kubernetes `Service` onto the created metrics
  targetLabels: []
  # PodTargetLabels transfers labels on the Kubernetes `Pod` onto the created metrics
  podTargetLabels: []
  # Name of the service port this endpoint refers to. Mutually exclusive with targetPort
  port: metrics
  # Name or number of the target port of the Pod behind the Service, the port must be specified with container port
  # property. Mutually exclusive with port
  targetPort: ""
  # Interval at which metrics should be scraped If not specified, Prometheusâ€™ global scrape interval is used
  interval: ""
  # Timeout after which the scrape is ended If not specified, the Prometheus global scrape timeout is used unless it
  # is less than the 'interval' in which the latter is used
  scrapeTimeout: ""
  # List of expressions that define custom relabeling rules
  relabelings: []
  # List of expressions that define custom metric relabeling rules after scrape has happened
  metricRelabelings: []
  # Additional labels to add
  additionalLabels: {}
  # HTTP scheme used for scraping. Defaults to `http`
  scheme: http
  # TLS configuration for scraping metrics
  tlsConfig: {}
    # caFile: /etc/prom-certs/root-cert.pem
    # certFile: /etc/prom-certs/cert-chain.pem
    # insecureSkipVerify: true
  # keyFile: /etc/prom-certs/key.pem
